using CountryCurrencyApi.Models;
using SkiaSharp;

namespace CountryCurrencyApi.Services;

public class ImageGenerator(ILogger<ImageGenerator> logger)
{
    /// <summary>
    /// Generates a PNG summary image with total countries and top 5 by estimated GDP.
    /// </summary>
    public async Task GenerateSummaryAsync(List<Country> countries, DateTime lastRefreshedAtUtc, string outputPath, CancellationToken ct)
    {
        try
        {
            var top5 = countries.Where(c => c.EstimatedGdp.HasValue && c.EstimatedGdp.Value > 0)
                .OrderByDescending(c => c.EstimatedGdp)
                .Take(5)
                .ToList();

            int width = 1000;
            int height = 600;
            using var surface = SKSurface.Create(new SKImageInfo(width, height));
            var canvas = surface.Canvas;
            canvas.Clear(SKColors.White);

            using var paint = new SKPaint
            {
                IsAntialias = true,
                Color = SKColors.Black,
                TextSize = 32
            };

            canvas.DrawText("Countries Summary", 30, 60, paint);
            paint.TextSize = 20;
            canvas.DrawText($"Total countries: {countries.Count}", 30, 100, paint);
            canvas.DrawText($"Last refreshed (UTC): {lastRefreshedAtUtc:yyyy-MM-dd HH:mm:ss} UTC", 30, 130, paint);

            paint.TextSize = 18;
            canvas.DrawText("Top 5 by estimated GDP:", 30, 180, paint);

            int y = 210;
            paint.TextSize = 16;
            foreach (var c in top5)
            {
                string line = $"{c.Name} — {c.EstimatedGdp?.ToString("N2") ?? "N/A"} ({c.CurrencyCode ?? "N/A"})";
                canvas.DrawText(line, 40, y, paint);
                y += 30;
            }

            // footer
            paint.TextSize = 12;
            canvas.DrawText("Generated by CountryCurrencyApi", 30, height - 20, paint);

            using var image = surface.Snapshot();
            using var data = image.Encode(SKEncodedImageFormat.Png, 90);
            using var fs = File.OpenWrite(outputPath);
            data.SaveTo(fs);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Failed to generate summary image");
            throw;
        }
    }
}